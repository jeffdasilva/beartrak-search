name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up uv
      # Install the latest version of uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install the project
      run: uv sync --all-extras --dev

    - name: Run type checking
      run: uv run mypy main.py tests/
    
    - name: Run linting
      run: uv run ruff check main.py tests/
    
    - name: Check code formatting
      run: uv run ruff format --check main.py tests/
    
    - name: Run unit tests
      run: uv run pytest tests/ -v --tb=short --ignore=tests/test_integration.py

  makefile-test:
    name: Test Makefile Targets
    runs-on: ubuntu-latest
    # This job validates that all our documented Makefile targets work correctly
    # Ensures the developer workflow matches what CI expects
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python 3.12
      run: uv python install 3.12
    
    - name: Test utility targets
      run: |
        echo "Testing utility Makefile targets..."
        make deps-check
        make help
        make info
        make clean
    
    - name: Test setup targets
      run: |
        echo "Testing setup Makefile targets..."
        make install
        make dev
    
    - name: Test quality targets
      run: |
        echo "Testing quality assurance Makefile targets..."
        make format-check
        make lint
        make test
        make qa
        make ci

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, makefile-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python 3.12
      run: uv python install 3.12
    
    - name: Install the project
      run: uv sync --all-extras --dev
    
    - name: Start the server in background
      run: |
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        echo $! > server.pid
        # Wait for server to start
        sleep 5
        # Verify server is running
        curl -f http://localhost:8000/health || exit 1
    
    - name: Run integration tests
      run: uv run python tests/test_integration.py
    
    - name: Test integration Makefile targets
      run: |
        # Test makefile targets that require a running server
        make test-health
        make test-integration
    
    - name: Stop the server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  quality-check:
    name: Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python 3.12
      run: uv python install 3.12
    
    - name: Install the project
      run: uv sync --all-extras --dev
    
    - name: Run complete quality checks
      run: |
        echo "üîç Running comprehensive quality checks..."
        uv run mypy main.py tests/
        uv run ruff check main.py tests/
        uv run ruff format --check main.py tests/
        echo "‚úÖ All quality checks passed!"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python 3.12
      run: uv python install 3.12
    
    - name: Install the project
      run: uv sync --all-extras --dev
    
    - name: Run security checks
      run: |
        # Install and run safety check for known vulnerabilities
        uv add --dev safety
        uv run safety check --json || true
        
        # Run bandit for security issues in code
        uv add --dev bandit
        uv run bandit -r . -f json || true
