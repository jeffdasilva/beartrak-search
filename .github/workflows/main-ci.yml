name: Main Branch CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  comprehensive-test:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Run all quality checks
      run: make all
    
    - name: Generate test coverage report
      run: |
        uv add --dev coverage[toml] pytest-cov
        uv run pytest tests/ --cov=. --cov-report=xml --cov-report=html --ignore=tests/test_integration.py
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: comprehensive-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python 3.12
      run: uv python install 3.12
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Test production-like startup
      run: |
        # Test that the app can start in production mode
        timeout 10 uv run uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 &
        SERVER_PID=$!
        sleep 5
        
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test basic search functionality
        curl -f -X POST -d "query=software" http://localhost:8000/api/search
        
        # Cleanup
        kill $SERVER_PID || true
    
    - name: Validate OpenAPI schema
      run: |
        # Generate and validate OpenAPI schema
        uv run python -c "
        from main import app
        import json
        schema = app.openapi()
        print('OpenAPI schema generated successfully')
        print(f'Endpoints: {len(schema.get(\"paths\", {}))}')
        "
    
    - name: Check security headers
      run: |
        # Start server
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        sleep 5
        
        # Check for security headers and CORS
        curl -I http://localhost:8000/health
        curl -H "Origin: http://localhost:3000" -I http://localhost:8000/health
        
        # Cleanup
        kill $SERVER_PID || true
